{"mappings":"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","sources":["src/index.js"],"sourcesContent":["let isCardAnimationRunning;\r\nlet gameCardsArray;\r\nlet gameStateArray;\r\nconst compareCardArray = [];\r\n\r\nconst generateCardsArray = totalCells => {\r\n  const arr = Array(totalCells).fill(null).map((_, i) => Math.floor(i / 2));\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst handleCardClick = event => {\r\n  if (isCardAnimationRunning || compareCardArray.length > 1) return;\r\n\r\n  const index = +event.target.closest('.card').getAttribute('data-id');\r\n\r\n  if (compareCardArray.includes(index) || gameStateArray[index]) return;\r\n\r\n  flipCard(index);\r\n  compareCardArray.push(index);\r\n\r\n  if (compareCardArray.length > 1) {\r\n    if (gameCardsArray[compareCardArray[0]] === gameCardsArray[compareCardArray[1]]) {\r\n      gameStateArray[compareCardArray[0]] = gameStateArray[compareCardArray[1]] = true;\r\n      compareCardArray.length = 0;\r\n      checkGameState();\r\n    } else {\r\n      isCardAnimationRunning = true;\r\n      shakeCard(compareCardArray[0]);\r\n      shakeCard(compareCardArray[1]);\r\n\r\n      setTimeout(() => {\r\n        flipCard(compareCardArray[0]);\r\n        flipCard(compareCardArray[1]);\r\n        compareCardArray.length = 0;\r\n        isCardAnimationRunning = false;\r\n      }, 1200);\r\n    }\r\n  }\r\n};\r\n\r\nconst checkGameState = () => {\r\n  if (gameStateArray.every(state => state)) {\r\n    setTimeout(() => alert('You win!'), 600);\r\n  }\r\n};\r\n\r\nconst shakeCard = cardIndex => {\r\n  setTimeout(() => document.querySelector(`[data-id='${cardIndex}']`).classList.add('card--shaked'), 600);\r\n  setTimeout(() => document.querySelector(`[data-id='${cardIndex}']`).classList.remove('card--shaked'), 1200);\r\n};\r\n\r\nconst flipCard = cardIndex => {\r\n  const cardElement = document.querySelector(`[data-id='${cardIndex}']`);\r\n\r\n  if (!cardElement.classList.contains('card--selected')) {\r\n    cardElement.classList.add('card--selected');\r\n    cardElement.querySelector('.card-back').classList.add(`card--${gameCardsArray[cardIndex]}`);\r\n  } else {\r\n    cardElement.classList.remove('card--selected');\r\n    cardElement.querySelector('.card-back').classList.remove(`card--${gameCardsArray[cardIndex]}`);\r\n  }\r\n};\r\n\r\nconst drawBoardGame = totalCells => {\r\n  let index = 0;\r\n\r\n  while (index < totalCells) {\r\n    const cardFrontElement = document.createElement('div');\r\n    cardFrontElement.classList.add('card-front');\r\n\r\n    const cardBackElement = document.createElement('div');\r\n    cardBackElement.classList.add('card-back');\r\n\r\n    const cardInnerElement = document.createElement('div');\r\n    cardInnerElement.classList.add('card-inner');\r\n    cardInnerElement.appendChild(cardFrontElement);\r\n    cardInnerElement.appendChild(cardBackElement);\r\n\r\n    const cardElement = document.createElement('div');\r\n    cardElement.classList.add('card');\r\n    cardElement.setAttribute('data-id', index);\r\n    cardElement.addEventListener('click', handleCardClick);\r\n    cardElement.appendChild(cardInnerElement);\r\n\r\n    document.querySelector('.scene').appendChild(cardElement);\r\n    index++;\r\n  }\r\n};\r\n\r\nconst startGame = () => {\r\n  gameCardsArray.forEach((_, cardIndex) => flipCard(cardIndex));\r\n  isCardAnimationRunning = true;\r\n\r\n  setTimeout(() => {\r\n    gameCardsArray.forEach((_, cardIndex) => flipCard(cardIndex));\r\n    isCardAnimationRunning = false;\r\n  }, 2000);\r\n};\r\n\r\nconst loadGame = numberOfPairCards => {\r\n  gameCardsArray = generateCardsArray(numberOfPairCards * 2);\r\n  gameStateArray = new Array(numberOfPairCards * 2).fill(false);\r\n  drawBoardGame(numberOfPairCards * 2);\r\n};\r\n\r\nloadGame(8);\r\nstartGame();\r\n"],"names":["isCardAnimationRunning","gameCardsArray","gameStateArray","compareCardArray","generateCardsArray","totalCells","arr","Array","fill","map","_","i","Math","floor","length","j","random","handleCardClick","event","index","target","closest","getAttribute","includes","flipCard","push","checkGameState","shakeCard","setTimeout","every","state","alert","cardIndex","document","querySelector","classList","add","remove","cardElement","contains","drawBoardGame","cardFrontElement","createElement","cardBackElement","cardInnerElement","appendChild","setAttribute","addEventListener","startGame","forEach","loadGame","numberOfPairCards"],"version":3,"file":"index.ea84c93f.js.map"}